{"name":"Moduler","tagline":"A small module manager.","body":"moduler [![Build Status](https://travis-ci.org/geastwood/tokenlist.svg?branch=master)](https://travis-ci.org/geastwood/tokenlist)\r\n=======\r\n\r\nA small module manager.\r\n\r\n## define a module\r\n```javascript\r\nvar foo = {};\r\nmoduler.create(foo); // setup the foo object to be able to define/require module\r\n\r\n// define a bar module with a simple object\r\nfoo.define('bar', function() {\r\n    return {\r\n        name: 'bar',\r\n        hi: function() {\r\n            return 'This object\\'s name is ' + this.name;\r\n        };\r\n    };\r\n});\r\n```\r\n## define a module with multiple dependencies\r\nIt's possible to define a modue with previously defined module.\r\n```javascript\r\n// provided that there are two modules\r\n// module1 and module2 are already defined with foo.define\r\nfoo.define('bar', function(module1, module2) {\r\n    return {\r\n        name: 'bar',\r\n        description: 'this module has dependencies \"module1\" and \"module2\"'\r\n    };\r\n}, ['module1', 'module2']);\r\n```\r\n## define a module that returns a constructor\r\n```javascript\r\nvar foo = {\r\n    bar: {}\r\n};\r\n\r\nfoo.define('Person', function() {\r\n    var Person = function() {};\r\n    Person.prototype.name = 'John Doe';\r\n    Person.prototype.introduce = function() {\r\n        return 'My name is ' + this.name;\r\n    };\r\n    return Person;\r\n});\r\n\r\nvar dependency = foo.require(['Person']);\r\nvar me = new dependency.Person();\r\nme.name = 'Fei';\r\nme.introduce(); // log 'My name is Fei';\r\n```\r\n## require (fetch) modules\r\nrequire a module\r\n```javascript\r\nvar dependency = foo.require(['bar']);\r\n\r\n// dependency will an object that containts 'bar' object\r\n'bar' in dependency; // log true\r\n```\r\n## augment an existing object with require\r\n```javascript\r\n// a simple object\r\nvar base = {\r\n    name: 'base object',\r\n    fn: function() {\r\n        return this.name;\r\n    }\r\n};\r\n\r\nvar foo = {};\r\nmoduler.create(foo);\r\n//define a module\r\nfoo.define('bar', function() {\r\n    return {\r\n        name: 'bar',\r\n        fn: function() {\r\n            return this.name + ' is another object';\r\n        }\r\n    };\r\n});\r\n\r\n// pass the base object\r\nfoo.require(['bar'], {base: base});\r\n// now base object is augmented with bar object, similar to mixin function\r\nbase.bar.fn(); // log 'bar is another object'\r\n```\r\n\r\n## alias\r\nUse '**as**' to alias a module when using '**require**'\r\n```javascript\r\n// providerd that a 'Person' constructor module is already defined\r\n// now alias 'Person' as 'P'\r\nvar dependency = foo.require(['Person as P']);\r\n'P' in dependency; // log true\r\n'Person' in dependency; // log false\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}